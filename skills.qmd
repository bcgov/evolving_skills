---
title: "Skills in BC labour market"
format: 
  html:
    self-contained: true
    page-layout: full
execute:
  echo: false
---

```{r, incude=FALSE, message=FALSE}
library(tidyverse)
library(here)
library(readxl)
library(janitor)
library(plotly)
library(fpp3)
library(conflicted)
library(patchwork)
#library(gganimate)
library(purrr)
#library(gifski)
conflicts_prefer(dplyr::filter)
conflicts_prefer(plotly::layout)
#constants------------
set.seed(1)
group_size <- 50
n_components <- 10
n_sim <- 1000
breaks <- seq(0, 100, 10)
labels <- paste0(breaks[-length(breaks)], "-", breaks[-1])
#functions-------------------
get_weighted_average <- function(tbbl) {
  tbbl %>%
    mutate(weighted_score = composite_score * prop) %>%
    summarize(weighted_average = sum(weighted_score, na.rm = TRUE)) %>%
    pull(weighted_average)
}
get_cagr <- function(tbbl) {
  start_value <- tbbl$weighted_average[1]
  end_value <- tbbl$weighted_average[nrow(tbbl)]
  years <- nrow(tbbl) - 1
  cagr_value <- ((end_value / start_value)^(1 / years)) - 1
  return(cagr_value)
}
get_last <- function(tbbl) {
  tbbl$weighted_average[tbbl$year == max(tbbl$year)]
}
get_props <- function(tbbl) {
  tbbl %>%
    mutate(bin = cut(composite_score,
                     breaks = breaks,
                     labels = labels,
                     right = FALSE,
                     include.lowest = TRUE))|>
    complete(bin = factor(labels, levels = labels), fill = list(prop = 0))|>
    group_by(bin)|>
    summarize(prop=sum(prop, na.rm=TRUE))
}

animate_distribution <- function(tbbl, skill_name) {
  skill_data <- tbbl |> filter(skills_competencies == skill_name)
  first_year <- min(skill_data$year, na.rm = TRUE)
  static_data <- skill_data |> filter(year == first_year)
 # browser()
  plot_ly() |>
    # Baseline bars: transparent fill with black outline
    add_bars(
      data = static_data,
      x = ~bin,
      y = ~prop,
      marker = list(
        color = 'rgba(0,0,0,0)',
        line = list(color = 'black', width = 2)
      ),
      name = paste("Baseline", first_year),
      showlegend = FALSE
    ) |>
    # Animated bars: partially transparent so outline stays visible
    add_bars(
      data = skill_data,
      x = ~bin,
      y = ~prop,
      frame = ~year,
      marker = list(color = 'rgba(30,144,255,0.6)'),  # semi-transparent steelblue
      name = "Animated",
      showlegend = FALSE
    ) |>
    layout(
      title = skill_name,
      xaxis = list(title = "Score"),
      yaxis = list(title = "Proportion"),
      barmode = "overlay"
    )
}
```


```{r, incude=FALSE, message=FALSE, cache=TRUE}
#load the data---------------------------------

skills <- read_excel(here("data","skills_data_for_career_profiles_2025-06-09.xlsx"))|>
  clean_names()|>
  mutate(noc_5=str_pad(noc2021, 5, pad="0"), .before="noc2021")|>
  select(noc_5, skills_competencies, importance_score, level_score)|>
  mutate(composite_score = sqrt(importance_score * level_score)) |>
  select(-importance_score, -level_score)|>
  group_by(skills_competencies)|>
  nest(score_by_noc = c(noc_5, composite_score))

hist_emp <- read_excel(here("data",
                            "Labour force status for 5 digit NOC (41229 split)2015-2024.xlsx"),
                       skip=3,
                       sheet="Employed")|>
  pivot_longer(cols=starts_with("2"),
               names_to="year",
               values_to="employed")|>
  clean_names()|>
  filter(noc_5!="Total")|>
  mutate(year=as.numeric(year),
         noc_5=if_else(str_detect(noc_5, "^0001[1-5]$"), "00018", noc_5),
         class_title=if_else(str_detect(noc_5, "00018"), "Senior managers - public and private sector", class_title), 
         source="LFS")|>
  group_by(noc_5, class_title, year, source)|>
  summarize(employed=sum(employed, na.rm=TRUE))

future_emp <- read_excel(here("data","employment_occupation.xlsx"), skip=3)|>
  filter(NOC !="#T", 
         `Geographic Area`=="British Columbia")|>
  pivot_longer(cols=starts_with("2"),
               names_to="year",
               values_to="employed")|>
  clean_names()|>
  mutate(year=as.numeric(year),
    noc_5=str_remove_all(noc, "#"),
         source="LMO")|>
  select(noc_5, class_title=description, year, source, employed)

emp <- bind_rows(hist_emp, future_emp)

emp_prop <- emp|>
  group_by(year, source)|>
  mutate(prop= employed/sum(employed, na.rm=TRUE))|>
  select(-employed)|>
  nest(prop_by_noc=c(noc_5, class_title,  prop))

joined <- crossing(skills, emp_prop)|>
  mutate(joined=map2(score_by_noc, prop_by_noc, inner_join))

crossed <- joined|>
  mutate(weighted_average=map_dbl(joined, get_weighted_average))|>
  select(skills_competencies, year, source, weighted_average)|>
  group_by(skills_competencies, source)|>
  nest()|>
  mutate(cagr= map_dbl(data, get_cagr),
         last= map_dbl(data, get_last)
  )
#weighted means over time----------------------------------
historic_growth <- ggplot(crossed|>filter(source=="LFS"), aes(x=cagr, y=fct_reorder(skills_competencies, cagr))) +
  geom_col()+
  labs(title="Historic growth (2015-2024)",
       x=NULL,
       y=NULL) +
  scale_x_continuous(labels=scales::percent_format(accuracy=0.1))+
  theme_minimal()

future_growth <- ggplot(crossed|>filter(source=="LMO"), aes(x=cagr, y=fct_reorder(skills_competencies, cagr))) +
  geom_col()+
  labs(title="Future growth (2025-2035) ",
       x=NULL,
       y=NULL) +
  scale_x_continuous(labels=scales::percent_format(accuracy=0.1))+
  theme_minimal()

current_level <- ggplot(crossed|>filter(source=="LFS"), aes(x=last, y=fct_reorder(skills_competencies, last))) +
  geom_col()+
  labs(title="Current (2024) skill scores",
       x=NULL,
       y=NULL)+
  theme_minimal()

#distributions over time---------------------------------------

binned_props <- joined|>
  mutate(binned_props=map(joined, get_props))|>
  select(skills_competencies, year, binned_props)|>
  unnest(binned_props)

skill_names <- unique(binned_props$skills_competencies)

emp_teer <- emp|>
  mutate(teer=str_sub(noc_5,2,2),
         teer=case_when(
           teer %in% c("0", "1") ~ "TEER 0&1",
           teer %in% c("2", "3") ~ "TEER 2&3",
           teer %in% c("4", "5") ~ "TEER 4&5",
           TRUE ~ "error"))|> #collapse teer to 3 groups 0&1, 2&3, 4&5
  group_by(year, source, teer)|>
  summarise(employed=sum(employed, na.rm=TRUE))|>
  group_by(teer, source)|>
  nest()|>
  mutate(cagr = map_dbl(data, ~ {
    df <- .x
    start_value <- df$employed[1]
    end_value <- df$employed[nrow(df)]
    years <- nrow(df) - 1
    cagr_value <- ((end_value / start_value)^(1 / years)) - 1
    return(cagr_value)
  })) |>
  unnest(data)
```

In order for the BC economy to thrive it is essential that the skills of the workforce match the needs of employers. However, the labour market is constantly evolving both in terms of occupational composition as well as the skills required for each specific occupation. In this note we focus exclusively on composition changes, and make the assumption that all occupational skill profiles are constant.  This assumption is supported by data frequency: employment by occupation is available (and variable) monthly in the Labour Force Survey, whereas the O\*NET skills data uses a rolling update schedule, completing a full refresh of all occupations every five years.    

## A first look: breakdown by TEER

We can get a preliminary idea of the changes in the labour market by looking at the breakdown of employment by TEER (Training, Education, Experience and Responsibilities) categories. The TEER system is a classification system used in Canada to categorize occupations based on the training, education, experience, and responsibilities required for each job. If the TEER composition of the labour market is changing over time, it indicates that the required skills are also changing.


```{r}
plot_ly(data = emp_teer, x = ~year, y = ~employed, color = ~teer, type = 'scatter',
        mode = 'none', stackgroup = 'bla',
        text = ~paste(teer,
                      "<br>Year: ",
                      year,
                      "<br>Source: ",
                      source,
                      "<br>Employed: ",
                      scales::comma(employed),
                      "<br>CAGR: ",
                      scales::percent(cagr, accuracy = 0.1)),
        hoverinfo = 'text') %>%
  layout(shapes = list(
    list(
      type = "line",
      x0 = 2024.5,
      x1 = 2024.5,
      y0 = 0,
      y1 = .845,
      yref = "paper"  # scales y0/y1 from 0 to 1 (full height)
    )
  ),
  title = list(text = paste0(
      "Compositional changes in BC labour market<br>",
      "<sub style='color:gray'>Historically, TEERs 0&1 growing rapidly, TEERs 2&3 constant share, TEERs 4&5 no growth
      Forecast: ordinal ranking of growth rates the same, but muted in magnitude. 
      </sub>")),
         xaxis = list(title = ""),
         yaxis = list(title = 'Employment'),
         annotations = list(
           list(
              text = "Source: LFS and LMO",  # your caption
              x = 0, y = -0.05,                 # below plot (x = left edge)
              xref = "paper", yref = "paper",   # relative to entire plot area
              showarrow = FALSE,
              xanchor = "left", yanchor = "top",
              font = list(size = 12, color = "gray")
      )
    ),
    margin = list(b = 80)  # add bottom margin for the caption
  )
```

## Mean values and growth rates of skills

One way to get a broad overview of the skills required in the labour market is to look at the weighted average of the skill scores, and their growth rates.  Specifically, we weight the occupation skill scores by the proportion of employed people in each occupation, in each year. This gives us a sense of how important each skill is currently, and how it is changing over time.  The following plot shows the weighted average skill scores in 2024 and the compound annual growth rate (CAGR) of these weighted average skill scores from 2015 to 2024, and from 2025 to 2035.

```{r, fig.width=14, echo=FALSE}
current_level+ historic_growth + future_growth +
   plot_annotation(caption = "Source: Skills data (ONET), Employment data (LFS)")
```

## Distribution of skills over time

Weighted averages collapse the distribution of skills into a single number which hides important information. To get a better understanding of how the skills are distributed, we can look at the distribution of skill scores over time.  The following plots show the distribution of skill scores over time. The x-axis represents the binned skill scores, and the y-axis represents the proportion of employed people with that skill score. The animation shows how the distribution changes over time.


### 
```{r}
animate_distribution(binned_props, skill_names[1])
```
### 
```{r}
animate_distribution(binned_props, skill_names[2])
```
### 
```{r}
animate_distribution(binned_props, skill_names[3])
```
### 
```{r}
animate_distribution(binned_props, skill_names[4])
```
### 
```{r}
animate_distribution(binned_props, skill_names[5])
```
### 
```{r}
animate_distribution(binned_props, skill_names[6])
```
### 
```{r}
animate_distribution(binned_props, skill_names[7])
```
### 
```{r}
animate_distribution(binned_props, skill_names[8])
```
### 
```{r}
animate_distribution(binned_props, skill_names[9])
```
### 
```{r}
animate_distribution(binned_props, skill_names[10])
```
### 
```{r}
animate_distribution(binned_props, skill_names[11])
```
### 
```{r}
animate_distribution(binned_props, skill_names[12])
```
### 
```{r}
animate_distribution(binned_props, skill_names[13])
```
### 
```{r}
animate_distribution(binned_props, skill_names[14])
```
### 
```{r}
animate_distribution(binned_props, skill_names[15])
```
### 
```{r}
animate_distribution(binned_props, skill_names[16])
```
### 
```{r}
animate_distribution(binned_props, skill_names[17])
```
### 
```{r}
animate_distribution(binned_props, skill_names[18])
```
### 
```{r}
animate_distribution(binned_props, skill_names[19])
```
### 
```{r}
animate_distribution(binned_props, skill_names[20])
```
### 
```{r}
animate_distribution(binned_props, skill_names[21])
```
### 
```{r}
animate_distribution(binned_props, skill_names[22])
```
### 
```{r}
animate_distribution(binned_props, skill_names[23])
```
### 
```{r}
animate_distribution(binned_props, skill_names[24])
```
### 
```{r}
animate_distribution(binned_props, skill_names[25])
```
### 
```{r}
animate_distribution(binned_props, skill_names[26])
```
### 
```{r}
animate_distribution(binned_props, skill_names[27])
```
### 
```{r}
animate_distribution(binned_props, skill_names[28])
```
### 
```{r}
animate_distribution(binned_props, skill_names[29])
```
### 
```{r}
animate_distribution(binned_props, skill_names[30])
```
### 
```{r}
animate_distribution(binned_props, skill_names[31])
```
### 
```{r}
animate_distribution(binned_props, skill_names[32])
```
### 
```{r}
animate_distribution(binned_props, skill_names[33])
```
### 
```{r}
animate_distribution(binned_props, skill_names[34])
```
### 
```{r}
animate_distribution(binned_props, skill_names[35])
```









